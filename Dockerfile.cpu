# ========================================
# 多阶段构建 - AI处理模块Dockerfile (CPU版本, 已优化缓存)
# 阶段1: 代码混淆
# 阶段2: 运行环境
# ========================================

# ========================================
# 阶段1: 代码混淆(使用 PyArmor)
# ========================================
FROM python:3.12-slim AS obfuscator
LABEL stage="obfuscation"
WORKDIR /build

# 1. 仅复制 CPU 版本的依赖文件
COPY requirements-cpu.txt .

# 2. 安装 PyArmor (只有在 requirements-cpu.txt 变化时才会重新执行)
RUN pip install --no-cache-dir pyarmor==8.5.9

# 3. 最后复制源代码 (修改代码不会影响上面的 pip install 缓存)
COPY *.py ./
COPY analyzer/ ./analyzer/
COPY preprocessor/ ./preprocessor/
COPY utils/ ./utils/
COPY botsort.yaml ./

# 使用 PyArmor 混淆代码
RUN pyarmor gen \
    --output /obfuscated \
    --recursive \
    --exclude requirements-cpu.txt \
    --exclude botsort.yaml \
    .

# ========================================
# 阶段2: 运行环境(生产镜像 - CPU版本)
# ========================================
FROM ubuntu:24.04

LABEL maintainer="侯阳洋"
LABEL description="VAR熔池视频分析系统 - AI处理模块(CPU版本，源码已混淆保护)"
LABEL security="code-obfuscated"
LABEL version="cpu"

WORKDIR /app/ai-processor

# 设置非交互式安装
ENV DEBIAN_FRONTEND=noninteractive

# 安装系统依赖 (不常变动，放在前面)
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3.12 \
    python3.12-dev \
    python3-pip \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libgl1 \
    curl \
    ffmpeg \
    fonts-noto-cjk \
    fonts-wqy-zenhei \
    fontconfig \
    && fc-cache -fv \
    && rm -rf /var/lib/apt/lists/*

# 设置环境变量
ENV PIP_BREAK_SYSTEM_PACKAGES=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1

# 创建非root用户
RUN groupadd -r appgroup && useradd -r -g appgroup appuser

# --- 缓存优化核心部分 ---
# 1. 只复制 CPU 版本的依赖文件
COPY requirements-cpu.txt .

# 2. 一次性安装所有 Python 依赖
# --mount 使用 BuildKit 缓存，即使依赖文件变化也能加速安装
RUN --mount=type=cache,target=/root/.cache/pip \
    pip3 install --no-cache-dir -r requirements-cpu.txt

# 3. 最后再复制混淆后的代码和配置文件
# 日常修改代码不会让上面耗时的 pip install 缓存失效
COPY --from=obfuscator /obfuscated/ .
COPY botsort.yaml .
# --- 缓存优化结束 ---

# 创建必要的目录并设置权限（storage目录由 docker volume 管理，不在此创建）
RUN mkdir -p \
    ./weights \
    logs && \
    chown -R appuser:appgroup /app

COPY weights/best.pt ./weights/

# 切换到非root用户
USER appuser

# 暴露端口
EXPOSE 5000

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:5000/health || exit 1

# 启动应用
CMD ["python3", "app.py"]
